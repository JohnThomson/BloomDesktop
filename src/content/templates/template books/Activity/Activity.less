// Most of this file has moved elsewhere (bookEdit/css/legacyQuizEditing.less),
// But I'm keeping this 'Activity.less' in case we add other pages in this category someday.
@import "./simpleComprehensionQuiz.less";
@import "./simple-dom-choice-activities.less";

// These items are visible by default (when not in the drag activity tool, especially
// when in the sign language or talking book tool), but not when we are in a tab
// or when "trying it" or running bloom player and in certain states

// These ones show in the Correct tab, or when the user has given a correct answer.
.drag-activity-start,
.drag-activity-wrong,
.drag-activity-try-it {
    &:not(.drag-activity-correct) {
        .drag-item-correct {
            display: none;
        }
    }
}

// In the Wrong tab, or when the user has given a wrong answer.
.drag-activity-start,
.drag-activity-correct,
.drag-activity-try-it {
    &:not(.drag-activity-wrong) {
        .drag-item-wrong {
            display: none;
        }
    }
}

// In the start tab, or in try-it when the user has not yet given an answer (or has clicked try-again)
.drag-activity-correct,
.drag-activity-wrong {
    .check-button {
        display: none;
    }
}

.drag-activity-try-it {
    #target-arrow,
    .bloom-dragHandle,
    .ui-resizable-handle {
        display: none;
    }
    .check-button {
        display: block; // displays in try-it mode initially...
    }
    &.drag-activity-wrong {
        .check-button {
            display: none; // but not if you already got it wrong
        }
        .try-again-button,
        .show-correct-button {
            display: block; // instead these show
        }
    }
    &.drag-activity-correct {
        .check-button {
            display: none; // but not if you already got it right
        }
    }
}

[data-target-of] {
    position: absolute;
    // above overlay canvas so we can drag it when the canvas is active
    z-index: @bubbleCanvasZIndex + 1;
    box-sizing: border-box;
}

// The rule above makes the target in front of the draggable it is the target-of.
// IIRC, there are good reasons not to give the draggable itself a z-index in edit mode.
// I think we can live with the target being in front in the other tabs, but
// when testing we need to be able to drag the bubble over the target.
.drag-activity-try-it {
    .bloom-textOverPicture {
        z-index: @bubbleCanvasZIndex + 2;
    }
    // Buttons for editing images and formatting text should not show in test mode.
    // Review: should we instead make special cases in the code that makes these buttons?
    .imageButton,
    #formatButton,
    .ui-tooltip-plain {
        // We need !important for the ui-tooltip-plain, which hides hint and source bubbles.
        // jquery tooltip puts display:block in the style of the element itself, so only
        // an !important rule can override it.
        display: none !important;
    }
    .cke_editable {
        cursor: default;
    }
    .marginBox {
        border: none;
        // repeat for specificity
        .bloom-imageContainer.bloom-imageContainer:after {
            border: none;
        }
    }
}

@tan: #e9d9bd;
@paleTan: #f9e9cc;

// This is the beginning of Drag Activity Theme.
// The class activityBlueOnTan is applied to the activity page.
// Eventually, a different class would be applied when a different theme is chosen.
// The same nested classes should have different colors for each theme.
.activityBlueOnTan {
    --page-color: #e9d9bd;
    --target-color: #f9e9cc;
    --dragable-background-color: #2980bb;
    --draggable-color: white;
    --fixed-color: #fc8602;
    &.bloom-page {
        // need this for specificity
        background-color: var(--page-color);
    }
    .bloom-textOverPicture.draggable-text {
        background-color: var(--dragable-background-color);
        color: var(--draggable-color);
    }
    .drag-item-correct,
    .drag-item-wrong {
        .bloom-translationGroup {
            background-color: transparent;
            color: var(--fixed-color);
        }
    }

    [data-target-of] {
        border: dashed 2px var(--dragable-background-color);
        background-color: var(--target-color);

        &:focus {
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1),
                0 0 8px var(--dragable-background-color);
        }
    }

    // We could add another common class to these three elements, but other themes
    // might want to style them differently.
    .check-button,
    .try-again-button,
    .show-correct-button {
        cursor: pointer;
        //font-size: 14px;
        font-weight: bold;
        //margin: 0 5px 5px 0;
        //padding: 5px 10px;
        text-decoration: none;
        //text-transform: uppercase;
        //transition: background-color 0.2s ease-in-out;

        // This makes it look more like John's mockup, but it creates a stacking context,
        // and that interferes with setting the z-index on the handles and format button
        // to put them in front of the canvas even though they are outside the TOP box.
        //transform: skew(-5deg);

        // This should work, but it gets clipped at the bottom because the height
        // of the TOP box is set explicly in its style.
        // Instead I use the :after kludge below
        // border: 1px solid #0e2a8d !important;
        // border-radius: 4px;

        .bloom-translationGroup {
            background-color: var(--dragable-background-color);
            color: var(--draggable-color);
            height: 100%;
            width: 100%;
            border-radius: 4px;
            border-top: 5px solid #50d9eb;
            border-bottom: 4px solid #0e2a8d;
            text-shadow: 1px 0px black, 0px 2px black, -1px 0px black,
                0px -1px black;

            &:after {
                content: "";
                position: absolute;
                top: -5px;
                left: 0;
                // No idea why the -1px is needed here.
                width: calc(100% - 1px);
                // The +8px and the -4px above put this outside the TG's own border.
                height: calc(100% + 8px);
                border: 1px solid #0e2a8d;
                border-radius: 4px;
            }

            p:after {
                // This defeats something somewhere that otherwise adds a paragraph mark when clicked
                content: "";
            }
            // &:hover {
            //     background-color: #e6e6e6;
            // }
            // &:active {
            //     background-color: #ccc;
            // }
        }
    }
}
